var rumjs=rumjs||{};rumjs.business={_shouldDisplayElementsHiddenByDidomi:false,init:function(a){rumjs.didomi.init();rumjs.ga.customDimensions=a},setManualConsent:function(){rumjs.config.logInfo("setManualConsent: Agree to all.");rumjs.didomi.setAgreeToAll("manual")},shouldDisplayElementsHiddenByDidomi:function(){return rumjs.business._shouldDisplayElementsHiddenByDidomi},runRAM:function(){if(typeof(ramjs)!=="undefined"&&ramjs.business&&ramjs.business.run){ramjs.business.run()}else{setTimeout(this.runRAM,500)}},processQueue:function(){var b=rumjs.que.slice();rumjs.que=[];rumjs.que.push=function(c){rumjs.business._processQueueElement(c)};if(b.length>0){for(var a in b){rumjs.business._processQueueElement(b[a])}}},_processQueueElement:function(a){if(typeof(a)==="function"){try{a.call()}catch(b){rumjs.config.logError("Error processing function :",b.message,b.stack)}}else{rumjs.config.logError("Elements written into rumjs.que must be a wrapping function")}}};rumjs.didomi={_externalSetAgreeToAll:false,_autoconsentReason:"",_vendorsIds:{legitimateInterest:[],userConsent:[],initialized:false},init:function(){rumjs.config.logInfo("Init RumJS Didomi");rumjs.config.logInfo("Setting fallback in case Didomi doesn't load.");var a=setTimeout(rumjs.didomi.didomiFallback,rumjs.config.didomiFallbackTimeout);window.didomiOnReady=window.didomiOnReady||[];window.didomiOnReady.push(function(b){rumjs.didomi._setVendorsBasedOnUserConsentOrLegitimate(b);rumjs.config.logInfo("Didomi is done loading.");clearTimeout(a);rumjs.config.logInfo("Removed Didomi fallback because Didomi is loaded.")});rumjs.didomi.registerEvents()},_setVendorsBasedOnUserConsentOrLegitimate:function(b){if(!this._vendorsIds.initialized){var a=b.getVendors(),d=b.getRequiredVendorIds();for(i in a){var c=a[i];if(d.indexOf(c.id)!==-1){if(c.purposeIds.length===0){if(c.legIntPurposeIds.length>0){this._vendorsIds.legitimateInterest.push(c.id)}}else{this._vendorsIds.userConsent.push(c.id)}}}this._vendorsIds.initialized=true}},getLegitimateInterestVendors:function(){return this._vendorsIds.legitimateInterest},getUserConsentVendors:function(){return this._vendorsIds.userConsent},didomiFallback:function(){rumjs.config.logWarn("Didomi was not loaded and setTimeout is launched: processing didomiFallback.");rumjs.ga.init();rumjs.fb.init();rumjs.business._shouldDisplayElementsHiddenByDidomi=true;rumjs.business.runRAM();rumjs.config.logWarn("Didomi was not loaded and setTimeout is launched: processed didomiFallback.")},setAgreeToAll:function(a){if(typeof(Didomi)!=="undefined"&&Didomi.notice.isVisible()){rumjs.config.logInfo("setAgreeToAll:",true);rumjs.didomi._externalSetAgreeToAll=true;rumjs.didomi._autoconsentReason=a;Didomi.setUserAgreeToAll()}else{rumjs.config.logInfo("Notice NOT visible. setAgreeToAll:",false)}return rumjs.didomi._externalSetAgreeToAll},registerEvents:function(){window.didomiEventListeners=window.didomiEventListeners||[];window.didomiEventListeners.push({event:"notice.hidden",listener:function(){rumjs.config.logInfo("Didomi notice hidden. Hidden elements can be displayed.");rumjs.business._shouldDisplayElementsHiddenByDidomi=true}});window.didomiEventListeners.push({event:"consent.changed",listener:function(a){rumjs.config.logInfo("Didomi consent changed.");action=a.action+(rumjs.didomi._autoconsentReason?"-"+rumjs.didomi._autoconsentReason:"");label=Didomi.getLanguage()+"-"+window.didomiCountry;rumjs.gaque("send","event","consent",action,label)}});window.didomiOnReady=window.didomiOnReady||[];window.didomiOnReady.push(function(a){rumjs.ga.init();rumjs.business.runRAM();if(a.isConsentRequired()){a.getObservableOnUserConsentStatusForVendor("facebook").subscribe(function(c){if(c===true){rumjs.fb.init()}rumjs.fb.updateConsent(c)})}else{rumjs.fb.init()}rumjs.config.logInfo("Didomi and RumJS are done loading. Register auto-consent events");if(a.notice.isVisible()){if(typeof(rumjs.config.unloadDelayAfterAutoConsent)!=="undefined"){window.addEventListener("unload",function(){if(rumjs.didomi._externalSetAgreeToAll){var c=new Date().getTime();rumjs.config.logInfo("setUserAgreeToAll: waiting for",rumjs.config.unloadDelayAfterAutoConsent,"ms");while(new Date().getTime()<c+rumjs.config.unloadDelayAfterAutoConsent){}rumjs.config.logInfo("setUserAgreeToAll: waited for",rumjs.config.unloadDelayAfterAutoConsent,"ms")}else{rumjs.config.logInfo("setUserAgreeToAll:",rumjs.didomi._externalSetAgreeToAll," - don't wait as user gave consent for all or consent was not defined")}})}document.addEventListener("scroll",function b(f){var d=document.body,e=document.documentElement;var c=Math.max(d.scrollHeight,d.offsetHeight,e.clientHeight,e.scrollHeight,e.offsetHeight);var g=Math.max(d.scrollTop,e.scrollTop);if(g>c*0.1){rumjs.config.logInfo("autoConsent event triggered. Trying to agree to all. scrollTop:",g,"- page height:",c);document.removeEventListener("scroll",b);rumjs.didomi.setAgreeToAll("scroll")}});if(typeof(rumjs.config.registerCustomAutoConsentEvents)==="function"){rumjs.config.registerCustomAutoConsentEvents();rumjs.config.logInfo("Auto-consent events from config are registered now")}}else{rumjs.business._shouldDisplayElementsHiddenByDidomi=true;rumjs.config.logInfo("Notice not visible. Hidden elements can be displayed.")}})},getUserConsentStatusForVendor:function(a){if(typeof(Didomi)!=="undefined"){if(Didomi.isConsentRequired()){consent=Didomi.getUserConsentStatusForVendor(a);if(typeof(consent)!=="undefined"){return consent}}else{return true}}return false},getUserPurpose1ConsentStatus:function(a){if(typeof(Didomi)!=="undefined"){if(Didomi.isConsentRequired()){consent=rumjs.didomi.getUserConsentStatus(Didomi.Purposes.Cookies,a);if(typeof(consent)!=="undefined"){return consent}}else{return true}}return false},getUserConsentStatus:function(a,b){if(typeof(Didomi)!=="undefined"){return Didomi.getUserConsentStatus(a,b)}return false},getDidomiStatus:function(){value="n/a";if(typeof(Didomi)==="undefined"){rumjs.config.logWarn("getDidomiStatus - CMP still not set");value="notloaded"}else{if(Didomi.isConsentRequired()){var b="p--";consentStatus=window.didomiState;if(!consentStatus.didomiPurposesConsent&&!consentStatus.didomiPurposesConsentDenied){b="p-unknown"}else{if(consentStatus.didomiPurposesConsentUnknown||(consentStatus.didomiPurposesConsent&&consentStatus.didomiPurposesConsentDenied)){b="p-partial"}else{if(consentStatus.didomiPurposesConsent&&!consentStatus.didomiPurposesConsentDenied){b="p-accept-all"}else{if(!consentStatus.didomiPurposesConsent&&consentStatus.didomiPurposesConsentDenied){b="p-refuse-all"}}}}var a="v--";consentStatus=window.didomiState;if(!consentStatus.didomiVendorsConsent&&!consentStatus.didomiVendorsConsentDenied){a="v-unknown"}else{if(consentStatus.didomiVendorsConsentUnknown||(consentStatus.didomiVendorsConsent&&consentStatus.didomiVendorsConsentDenied)){a="v-partial"}else{if(consentStatus.didomiVendorsConsent&&!consentStatus.didomiVendorsConsentDenied){a="v-accept-all"}else{if(!consentStatus.didomiVendorsConsent&&consentStatus.didomiVendorsConsentDenied){a="v-refuse-all"}}}}var c="r--";consentStatus=window.didomiState;if(!consentStatus.didomiVendorsRawConsent&&!consentStatus.didomiVendorsRawConsentDenied){c="r-unknown"}else{if(consentStatus.didomiVendorsRawConsentUnknown||(consentStatus.didomiVendorsRawConsent&&consentStatus.didomiVendorsRawConsentDenied)){c="r-partial"}else{if(consentStatus.didomiVendorsRawConsent&&!consentStatus.didomiVendorsRawConsentDenied){c="r-accept-all"}else{if(!consentStatus.didomiVendorsRawConsent&&consentStatus.didomiVendorsRawConsentDenied){c="r-refuse-all"}}}}value=b+"/"+a+"/"+c}}rumjs.config.logInfo("getDidomiStatus: consent status",value);return value}};rumjs.fbque=rumjs.fbque||function(){(rumjs.fbque.q=rumjs.fbque.q||[]).push(arguments)};rumjs.fb={_enabled:true,_initialized:false,init:function(){if(rumjs.fb._initialized){rumjs.config.logInfo("Call to init FB not executed. Already executed before.");return}rumjs.config.logInfo("init FB started. Initializing FB queue...");if(!window.fbq){var a=window.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)};if(!window._fbq){window._fbq=a}a.push=a;a.loaded=!0;a.version="2.0";a.queue=[]}if(rumjs.config.fbID){fbq("init",rumjs.config.fbID);rumjs.config.logInfo("configFB is applied.");this._loadScript();rumjs.fb.processQueue()}else{rumjs.fb._enabled=false;rumjs.config.logWarn("configFB is not available. FB is not available. Skipping...")}this._initialized=true;rumjs.config.logInfo("initFB finished.")},_loadScript:function(){rumjs.config.logInfo("Loading FB pixel script...");var a=document.createElement("script");a.type="text/javascript";a.src="https://connect.facebook.net/en_US/fbevents.js";a.defer=true;document.head.appendChild(a)},isConsentGranted:function(){var a=rumjs.didomi.getUserConsentStatusForVendor("facebook");rumjs.config.logInfo("Is FB consent granted:",a);return a},updateConsent:function(a){if(rumjs.fb._initialized){fbq("consent",a?"grant":"revoke");rumjs.config.logInfo("FB consent is changed to:",a)}else{rumjs.config.logInfo("FB consent update received but FB was not initialized, ignoring consent received:",a)}},trackEvent:function(a){rumjs.fbque("track",a);rumjs.config.logInfo("FB event tracked:",a)},processQueue:function(){if(!rumjs.fb._enabled){rumjs.config.logInfo("FB queue won't be processed because FB module is not activated is not enabled or configured.");return}rumjs.config.logInfo("Processing FB queue...");fbTmpQueue=rumjs.fbque.q;rumjs.fbque=rumjs.fb._processFBCall;for(fbArguments in fbTmpQueue){rumjs.fb._processFBCall.apply(null,fbTmpQueue[fbArguments])}rumjs.config.logInfo("FB queue processed.")},_processFBCall:function(b,a){fbq(b,a);rumjs.config.logInfo("FB event processed after FB consent is grant. Event:",b,a)}};rumjs.ga={_log:[],_enabled:true,_initialized:false,customDimensions:{},init:function(){if(rumjs.ga._initialized){rumjs.config.logInfo("Call to init GA not executed. Already executed before.");return}rumjs.config.logInfo("Initializing GA...");this._loadScript();window.dataLayer=window.dataLayer||[];window.gtag=window.gtag||function(){dataLayer.push(arguments)};gtag("checkstatus",rumjs.config.logInfo("Google Analytics (gtag) and RumJS GA are done loading."));gtag("js",new Date());rumjs.ga.setCustomDimensions();gtag("set",{transport_type:"beacon"});if(rumjs.config.configGA){rumjs.config.configGA();rumjs.config.logInfo("configGA is applied.")}else{rumjs.ga._enabled=false;rumjs.config.logWarn("configGA is not available. GA is not available. Skipping...")}rumjs.ga.processQueue();this._initialized=true;rumjs.config.logInfo("RumJS GA initialized.")},_loadScript:function(){rumjs.config.logInfo("Initializing GA script...");window.gtag_enable_tcf_support=true;var a=document.createElement("script");a.type="text/javascript";a.src="https://www.googletagmanager.com/gtag/js?id="+rumjs.config.gaID;a.defer=true;document.head.appendChild(a)},processQueue:function(){if(!rumjs.ga._enabled){rumjs.config.logInfo("GA queue won't be processed because GA module is not enabled or configured.");return}rumjs.config.logInfo("Processing GA queue...");tmpQueue=rumjs.gaque.q;rumjs.gaque=rumjs.ga._processGACall;for(gaArguments in tmpQueue){rumjs.ga._processGACall.apply(null,tmpQueue[gaArguments])}rumjs.config.logInfo("GA queue processed.")},_processGACall:function(c,g,a,d,h,j){rumjs.ga.setCustomDimension(rumjs.config.gaDimensionForConsentChanges,rumjs.didomi.getDidomiStatus());var f=rumjs.didomi.getUserConsentStatusForVendor("c:googleana-m22KTp3Y");if(typeof(j)==="undefined"){j={anonymize_ip:!f}}else{j.anonymize_ip=!f}var e=j||{};e.send_to=rumjs.config.gaID;if(c==="send"){if(g==="pageview"){c="event";g="page_view";if(a){e.page_path=a}}else{if(g==="event"){c=g;g=d;if(a){e.event_category=a}if(d){e.event_action=d}if(h){e.event_label=h}}}}var b={command:c,type:g,category:a,action:d,label:h,options:j,eventParams:e};rumjs.ga._log.push(b);if(g){gtag(c,g,e)}else{gtag(c,e)}rumjs.config.logInfo("GA event processed after Didomi is ready (or not loaded). Element:",rumjs.ga._log.length,b)},setCustomDimensions:function(){if(this.customDimensions){for(var a in this.customDimensions){this.setCustomDimension(a,this.customDimensions[a])}}else{this.customDimensions={}}},setCustomDimension:function(a,b){if(typeof(a)!=="undefined"&&a!==""){this.customDimensions[a]=b;auxMap={};auxMap[a]=b;gtag("set",auxMap)}else{rumjs.config.logError("setCustomDimension: cannot set key-value pair for parameters: key: '",a,"' - value: '",b,"'")}}};rumjs.que=rumjs.que||[];rumjs.business.processQueue();